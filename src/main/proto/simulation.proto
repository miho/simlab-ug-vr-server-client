syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.simlab.ug.grpc";
option java_outer_classname = "SimulationProto";

package simulation;

service SimulationService {
    // Server control
    rpc GetServerStatus(Empty) returns (ServerStatus);
    rpc SetWorkingDirectory(SetWorkingDirectoryRequest) returns (StatusResponse);
    
    // Script analysis
    rpc AnalyzeScript(AnalyzeScriptRequest) returns (ScriptAnalysis);
    
    // Simulation execution
    rpc RunSimulation(RunSimulationRequest) returns (stream SimulationUpdate);
    rpc StopSimulation(StopSimulationRequest) returns (StatusResponse);
    
    // File operations
    rpc GetSimulationResults(GetResultsRequest) returns (stream FileData);
}

// Service for publishing GLTF results grouped with time-series semantics and live updates
service ResultsService {
    // List detected GLTF groups under the server's working/output directories
    rpc ListGltfGroups(ListGltfGroupsRequest) returns (ListGltfGroupsResponse);

    // Stream GLTF files for a specific group (optionally for a single time step)
    rpc GetGroupGltfFiles(GetGroupGltfFilesRequest) returns (stream FileData);

    // Subscribe to GLTF file creation/update events with grouping metadata
    rpc SubscribeGltfFileEvents(SubscribeGltfFileEventsRequest) returns (stream GltfFileEvent);
}

message Empty {}

message ServerStatus {
    bool is_running = 1;
    string ug_path = 2;
    string working_directory = 3;
    repeated ActiveSimulation active_simulations = 4;
}

message ActiveSimulation {
    string simulation_id = 1;
    string script_path = 2;
    SimulationState state = 3;
    double progress = 4;
}

enum SimulationState {
    PENDING = 0;
    RUNNING = 1;
    COMPLETED = 2;
    FAILED = 3;
    CANCELLED = 4;
}

message SetWorkingDirectoryRequest {
    string directory = 1;
}

message StatusResponse {
    bool success = 1;
    string message = 2;
}

message AnalyzeScriptRequest {
    string script_path = 1;
}

message ScriptAnalysis {
    bool success = 1;
    string error_message = 2;
    repeated ScriptParameter parameters = 3;
}

message ScriptParameter {
    string name = 1;
    ParameterType type = 2;
    oneof default_value {
        string string_value = 3;
        int32 int_value = 4;
        double float_value = 5;
        bool bool_value = 6;
        ArrayValue array_value = 7;
    }
    string description = 8;
    string display_value = 9;  // Original value as it appears in the script for display
}

enum ParameterType {
    STRING = 0;
    INTEGER = 1;
    FLOAT = 2;
    BOOLEAN = 3;
    ARRAY = 4;
}

message ArrayValue {
    repeated string values = 1;
}

message RunSimulationRequest {
    string simulation_id = 1;
    string script_path = 2;
    string ug_executable = 3;
    repeated ParameterValue parameters = 4;
    string output_directory = 5;
}

message StopSimulationRequest {
    string simulation_id = 1;
}

message ParameterValue {
    string name = 1;
    oneof value {
        string string_value = 2;
        int32 int_value = 3;
        double float_value = 4;
        bool bool_value = 5;
        ArrayValue array_value = 6;
    }
}

message SimulationUpdate {
    string simulation_id = 1;
    UpdateType type = 2;
    oneof update {
        ProgressUpdate progress = 3;
        LogMessage log = 4;
        SimulationResult result = 5;
        ErrorMessage error = 6;
    }
}

enum UpdateType {
    PROGRESS = 0;
    LOG = 1;
    RESULT = 2;
    UPDATE_ERROR = 3;
}

message ProgressUpdate {
    double percentage = 1;
    string message = 2;
    int32 current_step = 3;
    int32 total_steps = 4;
}

message LogMessage {
    LogLevel level = 1;
    string message = 2;
    int64 timestamp = 3;
}

enum LogLevel {
    DEBUG = 0;
    INFO = 1;
    WARNING = 2;
    LOG_ERROR = 3;
}

message SimulationResult {
    SimulationState final_state = 1;
    int64 duration_ms = 2;
    repeated string output_files = 3;
    string summary = 4;
}

message ErrorMessage {
    string error = 1;
    string stack_trace = 2;
}

message GetResultsRequest {
    string simulation_id = 1;
    repeated string file_patterns = 2;
}

message FileData {
    string filename = 1;
    bytes content = 2;
    string mime_type = 3;
}

// ===== GLTF grouping and events =====

message ListGltfGroupsRequest {
    // Optional: restrict to a specific directory; if empty, server default locations are used
    string root_directory = 1;
}

message ListGltfGroupsResponse {
    repeated GltfGroup groups = 1;
}

message GltfGroup {
    string group_id = 1;            // stable id derived from directory + pattern
    string group_name = 2;          // human-friendly name
    string directory = 3;           // directory where files are located
    string pattern = 4;             // filename pattern (e.g., mycase_t*.gltf)
    bool is_time_series = 5;        // true if files have time-step suffixes
    repeated int32 time_steps = 6;  // available time steps (sorted ascending)
    int32 file_count = 7;
    repeated GroupFile files = 8;   // optional file listing (may be truncated by server)
}

message GroupFile {
    string filename = 1;
    string full_path = 2;
    int64 file_size = 3;
    int64 last_modified_ms = 4;
    int32 time_step = 5;            // 0 if not applicable
}

message GetGroupGltfFilesRequest {
    string group_id = 1;
    oneof selection {
        int32 time_step = 2;        // serve files for this single time step
        bool all = 3;               // serve all files in the group
    }
}

enum GltfFileEventType {
    FILE_CREATED = 0;
    FILE_MODIFIED = 1;
    GROUP_CREATED = 2;
    GROUP_UPDATED = 3;
}

message GltfFileEvent {
    GltfFileEventType type = 1;
    string group_id = 2;
    string group_name = 3;
    GroupFile file = 4;             // present for FILE_* events
    GltfGroup group = 5;            // present for GROUP_* events
}

message SubscribeGltfFileEventsRequest {
    // Optional: restrict watching to this directory; if empty, server default locations are used
    string root_directory = 1;
}